package models

import java.io.File

import org.jsoup.Jsoup
import org.jsoup.nodes.Document
import scala.jdk.CollectionConverters._
import scala.collection.mutable
import scala.collection.mutable.ListBuffer

class StudentFilePairs(val fileA: String, val fileB: String, val percentage: Double, val matchIndex: Int, val potentialPlagiarism: Boolean) {

  def extractResultsFromStaticHTML(): List[CodeFilePair] = {
    //get the file paths of the matches generated by JPlag
    val studentAMatchFile = "./public/results/match" + matchIndex + "-0.html"
    val studentBMatchFile = "./public/results/match" + matchIndex + "-1.html"
    val comparisonTable = "./public/results/match" + matchIndex + "-top.html"

    //generate a JSoup doc to extract the contents
    val studentADoc: Document = Jsoup.parse(new File(studentAMatchFile), "utf-8")
    val studentBDoc: Document = Jsoup.parse(new File(studentBMatchFile), "utf-8")
    val comparisonTableDoc: Document = Jsoup.parse(new File(comparisonTable), "utf-8")

    //remove unnecessary images
    studentADoc.getElementsByTag("img").remove()
    studentBDoc.getElementsByTag("img").remove()

    //create an empty list buffer to add each separate files from a student to identify the total number of files that has been detected
    val studentACodes = new ListBuffer[String]()
    val studentBCodes = new ListBuffer[String]()
    val studentAtitles = new ListBuffer[String]()
    val studentBtitles = new ListBuffer[String]()
    val comparisonLines = new ListBuffer[String]()
    val comparisonTokens = new ListBuffer[String]()
    val tableHeaders = new ListBuffer[String]()

    studentADoc.getElementsByTag("pre").asScala.foreach(studentACodes += _.outerHtml())
    studentBDoc.getElementsByTag("pre").asScala.foreach(studentBCodes += _.outerHtml())
    studentADoc.getElementsByTag("h3").asScala.foreach(studentAtitles += _.text())
    studentBDoc.getElementsByTag("h3").asScala.foreach(studentBtitles += _.text())
    comparisonTableDoc.select("a").asScala.foreach(comparisonLines += _.html())
    comparisonTableDoc.getElementsByTag("font").asScala.foreach(comparisonTokens += _.html())
    comparisonTableDoc.getElementsByTag("th").asScala.foreach(tableHeaders += _.html())

    val studentFileA = new ListBuffer[CodeFile]()
    val studentFileB = new ListBuffer[CodeFile]()

    for (index <- studentACodes.indices) {
      studentFileA += new CodeFile(studentAtitles(index), studentACodes(index))
    }
    for (index <- studentBCodes.indices) {
      studentFileB += new CodeFile(studentBtitles(index), studentBCodes(index))
    }

    val studentFilePairs = new ListBuffer[CodeFilePair]()

    var counter = 0
    while (counter < comparisonLines.length) {
      val codeFilePair = new CodeFilePair()
      for (element <- studentFileA) {
        //for titles in comparisonLines, counter is file on the left, counter+1 is file on the right
        if (comparisonLines(counter).contains(element.fileName)) {
          codeFilePair.codeFileA = element
        }
      }
      for (element <- studentFileB) {
        if (comparisonLines(counter+1).contains(element.fileName)) {
          codeFilePair.codeFileB = element
        }
      }
      codeFilePair.tokens = comparisonTokens(counter+1)
      studentFilePairs += codeFilePair
      counter += 2
    }

    studentFilePairs.toList
  }
}
