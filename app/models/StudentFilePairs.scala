package models

import java.io.File

import org.jsoup.Jsoup
import org.jsoup.nodes.Document
import scala.jdk.CollectionConverters._
import scala.collection.mutable
import scala.collection.mutable.ListBuffer

class StudentFilePairs(val fileA: String, val fileB: String, val percentage: Double, val matchIndex: Int, val potentialPlagiarism: Boolean) {

  def extractResultsFromStaticHTML(): List[(CodeFilePairs, CodeFilePairs)] = {
    //get the file paths of the matches generated by JPlag
    val studentAMatchFile = "./public/results/match" + matchIndex + "-0.html"
    val studentBMatchFile = "./public/results/match" + matchIndex + "-1.html"

    //generate a JSoup doc to extract the contents
    val studentADoc: Document = Jsoup.parse(new File(studentAMatchFile), "utf-8")
    val studentBDoc: Document = Jsoup.parse(new File(studentBMatchFile), "utf-8")

    //remove unnecessary images
    studentADoc.getElementsByTag("img").remove()
    studentBDoc.getElementsByTag("img").remove()

    //create an empty list buffer to add each separate files from a student to identify the total number of files that has been detected
    val studentACodes: ListBuffer[String] = new ListBuffer[String]()
    val studentBCodes: ListBuffer[String] = new ListBuffer[String]()
    val studentAtitles: ListBuffer[String] = new ListBuffer[String]()
    val studentBtitles: ListBuffer[String] = new ListBuffer[String]()


    studentADoc.getElementsByTag("pre").asScala.foreach(studentACodes += _.outerHtml())
    studentBDoc.getElementsByTag("pre").asScala.foreach(studentBCodes += _.outerHtml())
    studentADoc.getElementsByTag("h3").asScala.foreach(studentAtitles += _.html())
    studentBDoc.getElementsByTag("h3").asScala.foreach(studentBtitles += _.html())

    val studentFilePairs = new ListBuffer[(CodeFilePairs, CodeFilePairs)]()


    for (index <- studentACodes.indices) {
      studentFilePairs += ((new CodeFilePairs(studentAtitles(index), studentACodes(index)), new CodeFilePairs(studentBtitles(index), studentBCodes(index))))
    }
    studentFilePairs.toList
  }
}
